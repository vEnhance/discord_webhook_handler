name: Django Audit

on:
  workflow_call: {}

jobs:
  test:
    name: "Tests + type-check"
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 5
      matrix:
        python: ["3.8", "3.9", "3.10"]

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Set up Python ${{ matrix.python }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python }}

        # --- dependency installation ---
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
      - name: Load cached venv if cache exists
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      - name: Install dependencies if cache miss
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root
      - name: Install root project
        run: poetry install --no-interaction

        # --- type checking ---
      - name: mypy
        run: |
          source .venv/bin/activate
          mypy --ignore-missing-imports $(git ls-files '*.py' | grep -v migrations/ | grep -v /apps.py)
      - name: pyright (via ReviewDog)
        env:
          REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          source .venv/bin/activate
          BASE_PATH="$(cd "$(dirname "$0")" && pwd)"
          cd "${GITHUB_WORKSPACE}/${INPUT_WORKDIR}" || exit 1
          TEMP_PATH="$(mktemp -d)"
          PATH="${TEMP_PATH}:$PATH"

          echo '::group::üê∂ Installing reviewdog ... https://github.com/reviewdog/reviewdog'
          curl -fL https://raw.githubusercontent.com/reviewdog/reviewdog/master/install.sh | sh -s -- -b "${TEMP_PATH}" "${REVIEWDOG_VERSION}" 2>&1
          echo '::endgroup::'

          echo '::group::üêç Installing pyright ...'
          npm install pyright
          echo '::endgroup::'

          echo '::group::üîé Running pyright with reviewdog üê∂ ...'
          curl -fL https://raw.githubusercontent.com/jordemort/action-pyright/a72509b263749732e50c41d335964a100ec9c06a/pyright_to_rdjson/pyright_to_rdjson.py --output pyright_to_rdjson.py
          "$(npm bin)/pyright" $(git ls-files '*.py' | grep -v migrations ) --outputjson |
            python3 pyright_to_rdjson.py  |
            reviewdog -f=rdjson -name="pyright-report" \
              -reporter="github-check" \
              -fail-on-error="true"
          reviewdog_rc=$?
          echo '::endgroup::'
          exit $reviewdog_rc

        # --- unit tests and coverage ---
      - name: Unit tests
        run: |
          source .venv/bin/activate
          python manage.py migrate
          coverage run manage.py test --shuffle 1337
          coverage lcov -o coverage/lcov.info
      - name: Coverage
        uses: coverallsapp/github-action@master
        if: "matrix.python == 3.10"
        with:
          github-token: ${{ secrets.github_token }}

  style:
    name: "Style check"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Setup Python
        uses: actions/setup-python@v4
      - uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip
          restore-keys: ${{ runner.os }}-pip
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pyflakes toml yapf git+https://github.com/codespell-project/codespell.git@fd1d5c0d8dd5d8072d0422ce4f05b6202aa89ba0 tomli
      - name: Run Pyflakes
        run: |
          pyflakes .
      - name: Run YAPF
        run: |
          yapf $(git ls-files '*.py' | grep -v migrations/ | grep -v /apps.py)
      - name: Run spell-check
        run: |
          codespell $(git ls-files)
